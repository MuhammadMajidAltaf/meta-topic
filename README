BSP for Xilinx Zynq dev boards. For instructions on building, see: 

https://github.com/balister/meta-zynq/wiki/Getting-started

For the lazy, here's a quick script:

mkdir my-zynq
cd my-zynq
git clone git://git.openembedded.org/openembedded-core oe-core
git clone git://github.com/openembedded/meta-oe.git meta-oe
git clone git://git.openembedded.org/bitbake bitbake
git clone http://github.com/topic-embedded-software/meta-topic.git meta-zynq
source oe-core/oe-init-build-env build bitbake
# Edit conf/bblayers.conf and add meta-zynq to it, e.g.
# BBLAYERS ?= " \
#  /home/mike/my-zynq/oe-core/meta \
#  /home/mike/my-zynq/meta-oe/meta-oe \
#  /home/mike/my-zynq/meta-zynq \
#  "
vi conf/bblayers.conf
# Edit local.conf to match your setup. In particular, set
# BB_NUMBER_THREADS and PARALLEL_MAKE to match you CPU count
# set the following variables (to match yor setup):
# MACHINE="zedboard"
# XILINX_TOOL_PATH = "/opt/Xilinx/14.6"
# XILINX_LM_LICENSE_FILE = "2100@192.168.0.101"
# DISTRO="tiny"
# INHERIT += "rm_work"
vi conf/local.conf
# Then build your first image and relax a bit:
nice bitbake my-image

Note that "my-image" was designed to be used with DISTRO=tiny. It
expects to run with busybox-mdev instead of udev.

In order to properly use the zynq for anything useful, you will need to
build a bit image and FSBL using the Xilinx tools. README-LOGIC contains
some tips on that (mainly for myself because I keep forgetting these
tricks).

This is a fork of Ballister's OE environment for Zynq boards. This repo
mainly serves to share ideas and code for the Zynq series. In this version
I have so far made the following additions:

- Faster booting by tweaking boot params.

- Build BOOT.bin using Xilinx tools (which you'll need to install for this)
  from within OE. u-boot will be built by OE, you'll need to create a FSBL
  and optionally a logic bit file and point OE variables to their location.

- Build FPGA image using ISE, Vivado or custom scripts.

- Allow mixed booting, e.g. bootloader from QSPI, kernel and rootfs on SD.
  This is implemented by checking for an "autorun" script on the SD card.
  There's a recipe in the build that boots like described. You can have the
  script do anything that the u-boot shell supports.

- Offer kernels from Xilinx and ADI (for their framebuffer).

- Boot and run completely from QSPI flash, mounting a UBIFS root filesystem
  allowing read/write access.

Future versions of this repository will add full support for Dyplo, see
http://www.topic.nl/dyplo/

If you have questions or comments, I usually read the Xilinx Linux forum and
the ADI linux driver forum:
http://forums.xilinx.com/t5/Embedded-Linux/bd-p/ELINUX
http://ez.analog.com/community/linux-device-drivers/linux-software-drivers
